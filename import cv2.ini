import cv2
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import threading
import subprocess
import signal
import sys
import logging
import json
import hashlib
import traceback

# 設定截圖儲存路徑
SCREENSHOT_RTMP = "stream_captures"
os.makedirs(SCREENSHOT_RTMP, exist_ok=True)

# 設定 log 紀錄檔
logging.basicConfig(
    filename="error_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

stop_event = threading.Event()

last_image_hash = {}

def file_hash(path):
    hasher = hashlib.md5()
    with open(path, 'rb') as afile:
        buf = afile.read()
        hasher.update(buf)
    return hasher.hexdigest()
#抓圖比對率，記得改圖片檔案，可以在VLC異常抓圖
def capture_rtmp_ffmpeg(name, rtmp_url, interval=10, template_path="_123.png", threshold=0.40):
    retry_count = 0
    max_retries = 3
    repeat_count = 0
    max_repeat = 3
    while retry_count <= max_retries and not stop_event.is_set():
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(SCREENSHOT_RTMP, f"{name}_{timestamp}.jpg")

        cmd = [
            r"C:\ffmpeg\bin\ffmpeg.exe",
            "-y",
            "-i", rtmp_url,
            "-frames:v", "1",
            "-q:v", "2",
            filename
        ]

        try:
            subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=5)

            if os.path.exists(filename):
                current_hash = file_hash(filename)
                if name in last_image_hash and last_image_hash[name] == current_hash:
                    repeat_count += 1
                    print(f"⚠️ [{name}] 重複圖片 {repeat_count}/{max_repeat}")
                    if repeat_count >= max_repeat:
                        print(f"🔄 [{name}] 檢測到重複圖片超過次數，重連觸發")
                        logging.warning(f"{name} 重複圖片觸發重連：{filename}")
                        retry_count += 1
                        time.sleep(2)
                        continue
                else:
                    repeat_count = 0
                    last_image_hash[name] = current_hash

                img_rgb = cv2.imread(filename)
                if img_rgb is not None and img_rgb.shape[0] > 0 and img_rgb.shape[1] > 0:
                    #記得改圖片路徑
                    template = cv2.imread(r"C:\Users\User\Desktop\AutoCase\_123.png")
                    if template is not None:
                        result = cv2.matchTemplate(img_rgb, template, cv2.TM_CCOEFF_NORMED)
                        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                        print(f"🔍 [{name}] Template match 分數：{max_val:.5f}")
                        if max_val >= threshold:
                            print(f"❌ [{name}] 偵測到錯誤畫面，已截圖：{filename}")
                            logging.warning(f"{name} detect error screen: {filename}")
                        else:
                            print(f"✅ [{name}] 圖片正常（未保存）")
                            os.remove(filename)
                    else:
                        print(f"❌ 無法載入錯誤模板圖片：{template_path}")
                        logging.error(f"{name} template not found: {template_path}")
                else:
                    print(f"⚠️ [{name}] 擷取圖片無效，將刪除 {filename}")
                    logging.warning(f"{name} invalid image: {filename}")
                    os.remove(filename)
            else:
                print(f"❌ [{name}] 擷取後找不到圖片：{filename}")
                logging.error(f"{name} missing image: {filename}")
            break
        except subprocess.TimeoutExpired:
            print(f"⚠️ [{name}] FFmpeg 擷取超時，準備重試 ({retry_count + 1}/{max_retries})")
            logging.warning(f"{name} FFmpeg timeout retry {retry_count + 1}/{max_retries}")
            retry_count += 1
            time.sleep(2)

#找遊戲用的
def scroll_and_click_game(driver, game_title_code):
    try:
        # 等待所有可點擊的遊戲元素加載完成
        items = WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.ID, "grid_gm_item"))
        )

        # 遍歷並點擊符合條件的遊戲卡片
        for item in items:
            title = item.get_attribute("title")
            if title and game_title_code in title:
                driver.execute_script("arguments[0].scrollIntoView();", item)
                time.sleep(1)
                driver.execute_script("arguments[0].click();", item)
                print(f"✅ 成功點擊遊戲: {title}")
                time.sleep(2)

                try:
                    # 獲取頁面上所有的 Join 按鈕，因為新 DOM 可能不屬於 item
                    join_btns = WebDriverWait(driver, 5).until(
                        EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'gm-info-box')]//span[text()='Join']"))
                    )
                    for join_btn in join_btns:
                        if join_btn.is_displayed():
                            driver.execute_script("arguments[0].click();", join_btn)
                            print("🎮 成功點擊 Join 進入遊戲")
                            time.sleep(7)
                            click_multiple_positions(driver, ['18,38'])
                            print("點擊18,38")

                            return True
                    print("⚠️ 找到 gm-info-box，但沒有可見的 Join 按鈕")
                except Exception as join_err:
                    print(f"⚠️ 找到遊戲卡片但找不到 Join 按鈕: {join_err}")

        print(f"❌ 無法在大廳中找到遊戲: {game_title_code}")
        return False
            
    except Exception as e:
        print(f"❌ 執行滑動並點擊遊戲時失敗: {e}")
    return False

def click_multiple_positions(driver, positions):
    for pos in positions:
        try:
            xpath = f"//span[text()='{pos}']"
            elems = WebDriverWait(driver, 2).until(
                EC.presence_of_all_elements_located((By.XPATH, xpath))
            )
            if elems:
                driver.execute_script("arguments[0].click();", elems[0])
                print(f"✅ 已點擊座標位: {pos}")
                time.sleep(1) # 延遲一秒
        except Exception as e:
            print(f"❌ 找不到座標位 {pos}: {e}")

def spin_forever(driver, rtmp_name=None, rtmp_url=None, game_title_code=None):
    last_check_time = 0
    try:
        while not stop_event.is_set():
            current_time = time.time()
            if current_time - last_check_time >= 10:
                if rtmp_name and rtmp_url:
                    capture_rtmp_ffmpeg(rtmp_name, rtmp_url, template_path="error_template.png")
                last_check_time = current_time

            spin_clicked = False
            try:
                try:
                    balance_elem = driver.find_element(By.CSS_SELECTOR, ".balance-bg.hand_balance .text2")
                    bal_text = balance_elem.text.replace(",", "").strip()
                    if bal_text.isdigit() and int(bal_text) < 20000:
                        print(f"⚠️ BAL 過低（{bal_text}），執行退出流程...")
                        logging.warning(f"{rtmp_name} BAL too low: {bal_text}")

                        # 點擊 Cashout 按鈕
                        try:
                            quit_btn = driver.find_element(By.CSS_SELECTOR, ".my-button.btn_cashout")
                            driver.execute_script("arguments[0].click();", quit_btn)
                            time.sleep(2)

                            # 點擊 Exit To Lobby 按鈕
                            exit_btn = driver.find_element(By.CSS_SELECTOR, ".function-btn .reserve-btn-gray")
                            driver.execute_script("arguments[0].click();", exit_btn)
                            print("🚪 已點擊 Exit To Lobby")
                            time.sleep(5)

                            # 點擊 Confirm 按鈕（box-btn），因為有兩個按鈕，只能這樣寫
                            confirm_btn = driver.find_element(By.XPATH, "//button[.//div[text()='Confirm']]")
                            driver.execute_script("arguments[0].click();", confirm_btn)
                            print("✅ 已確認退出")
                            time.sleep(5)

                            # 如果沒點擊成功，嘗試返回大廳點擊遊戲
                            print(f"退出後返回原機器: {game_title_code}")
                            scroll_and_click_game(driver, game_title_code)
                            time.sleep(3)
                            continue

                        except Exception as quit_err:
                            print(f"❌ 找不到退出按鈕或操作失敗: {quit_err}")

                except Exception as bal_err:
                    print(f"⚠️ 無法取得 BAL 數值: {bal_err}")

                spin_btn = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".my-button.btn_spin"))
                )
                driver.execute_script("arguments[0].click();", spin_btn)
                print("✅ 已點擊 Spin:")
                print(f"剩餘（{bal_text}）")

                spin_clicked = True
            #遊戲的座標，每一款不同，主要應對小遊戲
                click_multiple_positions(driver, ['4,2','4,4','4,6','7,1','7,4','7,6','10,2','10,4','10,6','13,2','13,4','13,6'])  # 加入座標點擊

            except Exception as click_err:
                print(f"❌ {game_title_code} 找不到 Spin 或點擊失敗: {click_err}")
                if not spin_clicked and game_title_code:
                    # 如果沒點擊成功，嘗試返回大廳點擊遊戲
                    print(f"➡️ 嘗試返回大廳並重新點擊: {game_title_code}")
                    scroll_and_click_game(driver, game_title_code)
            time.sleep(1)

    except KeyboardInterrupt:
        print("🛑 手動中止迴圈，程式已結束")
        driver.quit()

def launch_driver(url):
    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.127 Mobile Safari/537.36")
    edge_options.add_argument("--window-size=432,859")
    edge_options.add_argument("--incognito")
    driver = webdriver.Edge(options=edge_options)
    driver.get(url)
    return driver

def run_game_test(config):
    url = config.get("url")
    rtmp_name = config.get("rtmp")
    rtmp_url = config.get("rtmp_url")
    game_title_code = config.get("game_title_code")

    print(f"➡️  初始化遊戲測試: {config}")

    driver = launch_driver(url)
    try:
        spin_forever(driver, rtmp_name=rtmp_name, rtmp_url=rtmp_url, game_title_code=game_title_code)
    except Exception as e:
        print(f"❌ 發生例外: {e}")
        traceback.print_exc()
        if rtmp_name and rtmp_url:
            capture_rtmp_ffmpeg(rtmp_name + "_Exception", rtmp_url, template_path="error_template.png")
        time.sleep(1)

def handle_interrupt(sig, frame):
    print("\n🛑 收到 Ctrl+C 中斷指令，正在中止所有執行緒...")
    stop_event.set()
    sys.exit(0)

signal.signal(signal.SIGINT, handle_interrupt)

if __name__ == "__main__":
    try:
        with open("game_config.json", "r", encoding="utf-8") as f:
            game_config = json.load(f)

        threads = []
        for conf in game_config:
            print(f"✅ 載入設定: {conf}")
            t = threading.Thread(target=run_game_test, args=(conf,))
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

    except KeyboardInterrupt:
        print("🛑 偵測到中斷訊號，正在關閉所有執行緒...")
        stop_event.set()